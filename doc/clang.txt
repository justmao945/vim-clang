*clang.txt*        Code completion for C/C++

CONTENTS                                        *clang-contents*
Introduction                                    |clang-introduction|
Config                                          |clang-config|
Variables                                       |clang-variables|
Commands                                        |clang-commands|
FAQ                                             |clang-faq|
Changelog                                       |clang-changelog|
Credits                                         |clang-credits|
==============================================================================
INTRODUCTION                                    *clang-introduction*
This is a plugin to complete C/C++ source code using Clang. 

- Requirements
    - Executable
        Clang   - http://clang.llvm.org

==============================================================================
CONFIG                                          *clang-config*

Vim-clang uses a file named ".clang" (same as .clang_complete for clang_complete)
in the project root to save Clang options. Relative path is recommended when
configure the include directory, so we can move the project to anywhere...
Here is a tree to show the location of file '.clang'
.
├── build/
├── .clang
├── CMakeLists.txt
├── COPYING
├── .git/
├── .gitignore
├── raw-test/
├── README.md
├── src/
├── test/
└── yacl/

The file ".clang" only contains: "-I." to include files in directory "./".
So that the source file should use #include "yacl/xxx.h" to include files.

Now a new similar file named ".clang.ow" is added to deal with the special
case that one want to overwrite all clang options, which means the one don't
need automatically generated options for clang by the plugin.
See |g:clang_dotfile_overwrite| for more details.

Please note that all options in ".clang" and ".clang.ow" must be safe
to be used by the 'shell', that means special chars should always be 
escaped correctly. See |shellescape()| for more details.

==============================================================================
VARIABLES                                       *clang-variables*
g:clang_auto                            *g:clang_auto*
        If equals to 1, automatically complete after ->, ., ::
    Default: >
        let g:clang_auto = 1
<
g:clang_c_options                       *g:clang_c_options*
        Options added at the end of clang command for C sources.
        Note: Please make sure options are safe to be used by 'shell',
              which means you should escape special chars.
              See |shellescape()| for more details.
    Default: >
        let g:clang_c_options = ''
<
g:clang_c_completeopt                   g:clang_c_completeopt*
        Local |completeopt| version for C sources.
    Default: >
        " No preview window for C
        let g:clang_c_completeopt = 'longest,menuone'
<
g:clang_cpp_options                     *g:clang_cpp_options*
        Options added at the end of clang command for C++ sources.
        Note: Please make sure options are safe to be used by |shell|,
              which means you should escape special chars.
              See |shellescape()| for more details.
    Default: >
        let g:clang_cpp_options = ''
<
    To support c++0x features and use libcxx: >
        let g:clang_cpp_options = '-std=c++ -stdlib=libc++'
<
g:clang_cpp_completeopt                 *g:clang_cpp_completeopt*
        Local |completeopt| version for C++ sources.
    Default: >
        " Have preview window for C++ as its complex prototypes
        let g:clang_cpp_completeopt = 'longest,menuone,preview'
<
g:clang_diagsopt                        *g:clang_diagsopt*
        This option is a string combined with split mode, colon, 
        and max height of the split window. Colon and max height are
        optional.
        e.g. >
            let g:clang_diagsopt = 'rightbelow:6'
            let g:clang_diagsopt = 'rightbelow'
            let g:clang_diagsopt = ''   " <- disable diagnostics
<
        If it equals '', disable clang diagnostics after completion,
        otherwise diagnostics will be put in a split window/viewport.
        Split policy indicators and their corresponding modes are: >
            " disable diagnostics window
            let g:clang_diagsopt = '' 

            " split SCREEN horizontally, with new split on the top
            let g:clang_diagsopt = 'topleft'

            " split SCREEN horizontally, with new split on the bottom
            let g:clang_diagsopt = 'botright'
            
            " split VIEWPORT horizontally, with new split on the bottom
            let g:clang_diagsopt = 'rightbelow'

            " split VIEWPORT horizontally, with new split on the top
            let g:clang_diagsopt = 'leftabove' 
<
    Default: >
        let g:clang_diagsopt = 'rightbelow:6'
<
g:clang_dotfile                         *g:clang_dotfile*
        Each project can have a dot file at his root, containing 
        the compiler options. This is useful if you're using some
        non-standard include paths.
        Note: Relative include and library path is recommended.
    Default: >
        let g:clang_dotfile = '.clang'
<
g:clang_dotfile_overwrite               *g:clang_dotfile_overwrite*
        Same as |g:clang_dotfile| but has higher priority than it.
        Options in |g:clang_dotfile| will be appended to discovered
        options that from |g:clang_c_options|, |g:clang_cpp_options|
        and |g:clang_include_sysheaders|. But if |g:clang_dotfile_overwrite|
        file is exist, plugin will not do the discovery anymore, only add
        the minimum of options and append |g:clang_dotfile_overwrite|
        to them before calling clang.
        Note: This is very useful if you are doing some cross-platform
        projects, they may have different include directories and options.
    Default: >
        let g:clang_dotfile_overwrite = '.clang.ow'
<
g:clang_exec                            *g:clang_exec*
        Name or path of executable clang. Use this if clang has a
        non-standard name, or isn't in the path.
    Default: >
        let g:clang_exec = 'clang'
<
g:clang_format_auto                     *g:clang_format_auto*
        If equals to 1, automatically format current file when save file.
    Default: >
        let g:clang_format_auto = 0
<
g:clang_format_exec                     *g:clang_format_exec*
        Name or path of executable clang-format. Use this if clang-format
        has a non-standard name, or isn't in the path.
    Default: >
        let g:clang_format_exec = 'clang-format'
<
g:clang_format_style                    *g:clang_format_style*
        Style can be LLVM, Google, Chromium, Mozilla, WebKit
    Default: >
        let g:clang_format_style = 'LLVM'
<
g:clang_include_sysheaders              *g:clang_include_sysheaders*
        Discover default system C/C++ headers automatically.
        Set 0 to disable it.
    Default: >
        let g:clang_include_sysheaders = 1
<
g:clang_load_if_clang_dotfile           g:clang_load_if_clang_dotfile
        If equals to 1, this plugin will be loaded only if g:clang_dotfile or
        g:clang_dotfile_overwrite file is found in the at his root.
    Default: >
        let g:clang_load_if_clang_dotfile = 0
<
g:clang_pwheight                        *g:clang_pwheight*
        Maximum height of completion preview window if has it.
        A local version of |previewheight| that only affect current view.
    Default: >
        let g:clang_pwheight = 4
<
g:clang_sh_exec                         *g:clang_sh_exec*
        Set |shell| before execute command.
    Default: >
        " on windows
        let g:clang_sh_exec = 'C:\Windows\system32\cmd.exe'
        " otherwise
        let g:clang_sh_exec = 'bash' 
<
g:clang_statusline                      *g:clang_statusline*
        Status line showed in preview window and diagnostics window.
        The first %s is the place to hold messages generated by clang.
    Default: >
        " Something like '1 error generated. | 1/5 | 20%'
        let g:clang_statusline = '%s\ \|\ %%l/\%%L\ \|\ %%p%%%%'
<
g:clang_stdafx_h                        *g:clang_stdafx_h*
        Clang default header file name to generate PCH. Clang will find
        the stdafx header to speed up completion. 
        Note: Only find this file in clang root and its sub directory
        "include". If it is not in mentioned dirs, it must be defined
        in the dotclang file "-include-pch /path/to/stdafx.h.pch".
        Additionally, only find PCH file stdafx for C++, but not for C.
    Default: >
        let g:clang_stdafx_h = 'stdafx.h'
<
g:clang_use_path                        *g:clang_use_path*
        Add |path| to include paths for clang completion.
    Default: >
        let g:clang_use_path = 1
<
g:clang_vim_exec                        *g:clang_vim_exec*
        Name or path of executable vim.
        Note: This option is used in async mode to startup a new vim
        process. Please add vim to your system PATH or overwrite this var.
        Attention that default the command 'vim' will not act as a server,
        instead you must add '--servername XX' to start a unique server.
    Default: >
        " Linux
        let g:clang_vim_exec = 'vim'

        " Mac OSX
        let g:clang_vim_exec = 'mvim'
<
==============================================================================
COMMANDS                                         *clang-commands*

ClangCloseWindow                        *ClangCloseWindow*
        Close preview and diagnostics window for current buffer.
        Or uses a leader map to do this this: >
            map <silent> <Leader>c <Esc>:ClangClosePreviewDiagWindow<CR>
<
ClangCompleteInit                       *ClangCompleteInit*
        Re-initialize the plugin, very useful to reload the plugin after
        chaging configuration or |g:clang_dotfile|. Use ':e' to reload file
        is OK, too.

ClangFormat                             *ClangFormat*
        Format current file '%', need execute ':e' to reload file ?

ClangGenPCHFromFile <stdafx.h>          *ClangGenPCHFromFile*
        Generate PCH file from the give file name <stdafx.h>, which can
        be '%' (aka current file name).

ClangSyntaxCheck                        *ClangSyntaxCheck*
        Run syntax check mannually. Syntax checker will be called when save
        file, and diagnostics window will be opened if has error.

==============================================================================
FAQ                                              *clang-faq*

Q: How to open diagnostics window ?
A: Diagnostics window will be opened automatically when some errors occured
   in your source code, and dismissed when they are fixed or change buffers.

Q: How to complete head files ?
A: Please use with neocomplete, they can work well together.

        " disable auto completion for vim-clang
        let g:clang_auto = 0
        " default 'longest' can not work with neocomplete
        let g:clang_c_completeopt = 'menuone,preview'
        let g:clang_cpp_completeopt = 'menuone,preview'
        
        " use neocomplete
        " input patterns
        if !exists('g:neocomplete#force_omni_input_patterns')
          let g:neocomplete#force_omni_input_patterns = {}
        endif
        let g:neocomplete#force_overwrite_completefunc = 1
        
        " for c and c++
        let g:neocomplete#force_omni_input_patterns.c =
              \ '[^.[:digit:] *\t]\%(\.\|->\)\w*'
        let g:neocomplete#force_omni_input_patterns.cpp =
              \ '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'


==============================================================================
CHANGELOG                                        *clang-changelog*
0.4.1
* support Windows
* bug fix

0.4.0
* improve job control for neovim [syswow]
* support auto-close diagnostics window when leave
* support syntax check when save source file
* support neocomplete for header files completion
* support clang-format

0.3.0
* support job control for neovim [syswow]
* no need to write source file to disk before completion [mlen]
* fix init plugin when create new file
* bug fix

0.2.8
* bug fix on var set and restore
* refactor DiagnosticsWindowClose

0.2.7
* fix restore global var when call ClangComplete

0.2.6
* import include path from &path [thawk]
* do not initialize plugin for non readable files [jreybert]
* fix "can't remove clang warning #16" issue [jreybert]
* add an option to load vim-clang only if .clang file is found [jreybert]

0.2.5
* update doc

0.2.4
* ?

0.23
* Add g:clang_c_completeopt and g:clang_cpp_completeopt
* Add g:clang_include_sysheaders
* Add g:clang_dotfile_overwrite
* Add ClangCompleteInit
* Fix bugs

0.22
* Change g:clang_diagsopt
* Show diagnostics window before popup completion window
* Add debug mode g:clang_debug
* Fix bugs

0.21
* Add async mode to execute clang
* Add g:clang_pwheight, g:clang_statusline, g:clang_vim_exec
* Add command "ClangClosePreviewDiagWindow"
* Fix bugs

0.1
* Initial version

==============================================================================
CREDITS                                          *clang-credits*

Thanks to following people for suggestions and patches:
* adelarsq
* jreybert
* mattn
* mlen
* RageCooky
* syswow
* wookayin
* yuquan23459

==============================================================================
vim:tw=78:ts=8:ft=help:norl
